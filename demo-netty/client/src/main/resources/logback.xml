<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
     scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
     debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 运行环境，dev:开发，test:测试，pre:预生产，prod:生产 -->
    <property name="ENV" value="dev" />
    <!-- 日志文件存放路径设置，绝对路径 -->
    <!--    <property name="logs.dir" value="/opt/logs" />-->
    <!-- 定义日志文件 相对输入位置 开发环境建议更改 -->
    <property name="log.dir" value="log" />
    <!--  加载外部配置文件  -->
<!--    <property file="system.properties" />-->
    <!-- 上下文变量设置,用来定义变量值,其中name的值是变量的名称，value的值时变量定义的值。
    通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="CONTEXT_NAME" value="netty-demo" />
    <!-- 控制台日志级别 -->
    <property name="CONSOLE_LEVEL" value="INFO" />
    <!-- 文件日志级别 -->
    <property name="FILE_LEVEL" value="WARN" />
    <!-- 日志输出格式设置 -->
    <!--
    %d{yyyy-MM-dd HH:mm:ss} [%level] - %msg%n
      Logger: %logger
      Class: %class
      File: %file
      Caller: %caller
      Line: %line
      Message: %msg
      Method: %M
      Relative: %relative
      Thread: %thread
      Exception: %ex
      xException: %xEx
      nopException: %nopex
      rException: %rEx
      Marker: %marker
      newline:%n
    -->
    <property name="CONSOLE_LOG_PATTERN_INFO"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS} %relative) %magenta([%thread]) %cyan(%class.%M:%line{90}) %highlight(%-5level) - %highlight(%msg%n)" />
    <property name="CONSOLE_LOG_PATTERN_WARN"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS} %relative) %magenta([%thread]) %cyan(%class.%M:%line{90}) %yellow(%-5level) - %yellow(%msg%n)" />
    <property name="CONSOLE_LOG_PATTERN_ERROR"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS} %relative) %magenta([%thread]) %cyan(%class.%M:%line{90}) %red(%-5level) - %highlight(%msg%n)" />
    <property name="CONSOLE_LOG_PATTERN_DEBUG"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS} %relative) %magenta([%thread]) %cyan(%class.%M:%line{90}) %-5level - %msg%n" />
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %relative [%thread] %class.%M:%line{90} %-5level - %msg%n" />
    <!-- 上下文名称：<contextName>, 每个logger都关联到logger上下文， 默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，
         用于区分不同应用程序的记录。
         一旦设置，不能修改。 -->
    <contextName>${CONTEXT_NAME}</contextName>
    <!-- <appender>是<configuration>的子节点，是负责写日志的组件。 有两个必要属性name和class。name指定appender名称，
        class指定appender的实现类。 -->
    <appender name="console.debug" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 对日志进行格式化。 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN_DEBUG}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="console.info" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 对日志进行格式化。 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN_INFO}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="console.warn" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 对日志进行格式化。 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN_WARN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="console.error" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 对日志进行格式化。 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN_ERROR}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="file.time"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 按天来回滚，如果需要按小时来回滚，则设置为{yyyy-MM-dd_HH} -->
        <file>${log.dir}/logback-${CONTEXT_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.dir}/logback-${CONTEXT_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 -->
            <maxHistory>30</maxHistory>
            <!-- 按时间回滚的同时，按文件大小来回滚 -->
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 设置过滤级别 -->
            <level>${FILE_LEVEL}</level>
        </filter>
        <!-- 日志输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="file.count"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 -->
        <file>${log.dir}/logback-${CONTEXT_NAME}.log</file>
        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。
                 还可以指定文件压缩选项，例如，mylog%i.log.gz
                 或者 没有log%i.log.zip -->
            <FileNamePattern>${log.dir}/logback-${CONTEXT_NAME}.%i.log</FileNamePattern>
            <!-- 窗口索引最小值 -->
            <minIndex>1</minIndex>
            <!-- 窗口索引最大值 -->
            <maxIndex>30</maxIndex>
        </rollingPolicy>
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 日志级别过滤器 -->
            <level>${FILE_LEVEL}</level>
        </filter>
        <!-- 激活滚动的条件。 -->
        <triggeringPolicy
                class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 活动文件的大小，默认值是10MB -->
            <maxFileSize>30MB</maxFileSize>
        </triggeringPolicy>
        <!-- 对记录事件进行格式化。 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name="ASYNC_logback" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <!-- <discardingThreshold>0</discardingThreshold> -->
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <!-- <queueSize>256</queueSize> -->
        <!-- 添加附加的appender,最多只能添加一个 -->
<!--        <appender-ref ref="file.count" />-->
        <appender-ref ref="file.time" />
    </appender>
    <!-- 指定包输出路径 -->
    <!-- 用来设置某一个 包 或者具体的某一个 类 的日志打印级别、以及指定<appender>, name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
        additivity:是否向上级logger传递打印信息。默认是true。(这个logger的上级就是上面的root) <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。 -->
<!--    <logger name="org.logback.test" level="DEBUG" additivity="true">-->
<!--        <appender-ref ref="console" />-->
<!--    </logger>-->
    <!-- 特殊的<logger>元素，是根logger。只有一个level属性，应为已经被命名为"root". level:设置打印级别，大小写无关：TRACE,
        DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。 -->
    <root>
        <!-- 规定 appender 可以接收到哪些，但最终输出由 appender 中的过滤器决定 -->
        <level value="${CONSOLE_LEVEL}" />
        <!-- if表达式，需要Janino jar -->
        <!-- Janino 2.6.0版本开始，除了janino.jar之外， commons-compiler.jar也需要在类路径中 -->
        <if condition='property("ENV").contains("dev")'>
            <then>
                <appender-ref ref="console.debug" />
                <appender-ref ref="console.info" />
                <appender-ref ref="console.warn" />
                <appender-ref ref="console.error" />
            </then>
        </if>
        <appender-ref ref="file.time" />
<!--        <appender-ref ref="file.count" />-->
    </root>
</configuration>